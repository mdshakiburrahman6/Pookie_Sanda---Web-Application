// This file contains JavaScript functionality for the login and registration pages

document.addEventListener('DOMContentLoaded', function() {
   
    // Add focus effects to form inputs
    // const inputs = document.querySelectorAll('.form-control');
    
    // inputs.forEach(input => {
    //     input.addEventListener('focus', function() {
    //         this.parentElement.classList.add('focused');
    //     });
        
    //     input.addEventListener('blur', function() {
    //         if (this.value === '') {
    //             this.parentElement.classList.remove('focused');
    //         }
    //     });
    // });
    
    // Add ripple effect to buttons
    const buttons = document.querySelectorAll('.submit-btn, .social-btn');
    
    buttons.forEach(button => {
        button.addEventListener('click', function(e) {
            // Create ripple element
            // const ripple = document.createElement('span');
            // const rect = this.getBoundingClientRect();
            // const size = Math.max(rect.width, rect.height);
            // const x = e.clientX - rect.left - size / 2;
            // const y = e.clientY - rect.top - size / 2;
            
            // ripple.style.width = ripple.style.height = size + 'px';
            // ripple.style.left = x + 'px';
            // ripple.style.top = y + 'px';
            // ripple.classList.add('ripple');
            
            // this.appendChild(ripple);
            
            // Remove ripple after animation
            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });
    
    // Form submission handlers (static - no actual submission)
    const submitButtons = document.querySelectorAll('.submit-btn');
    
    submitButtons.forEach(button => {
        button.addEventListener('click', function() {
            const form = this.closest('form');
            const inputs = form.querySelectorAll('.form-control');
            let allFilled = true;
            
            // Check if all fields are filled
            inputs.forEach(input => {
                if (!input.value.trim()) {
                    allFilled = false;
                    input.style.borderColor = 'var(--primary-pink)';
                    
                    // Remove the red border after 2 seconds
                    setTimeout(() => {
                        input.style.borderColor = '';
                    }, 2000);
                }
            });
            
            if (allFilled) {
                // Simulate loading state
                const originalText = this.textContent;
                this.textContent = 'Processing...';
                this.disabled = true;
                
                // Reset after 2 seconds
                setTimeout(() => {
                    this.textContent = originalText;
                    this.disabled = false;
                    
                    // Show success message
                    showMessage('Action completed successfully!', 'success');
                }, 2000);
            } else {
                showMessage('Please fill in all fields', 'error');
            }
        });
    });
    
    // Function to show temporary messages
    function showMessage(message, type) {
        // Remove existing message if any
        const existingMessage = document.querySelector('.message-alert');
        if (existingMessage) {
            existingMessage.remove();
        }
        
        // Create message element
        const messageEl = document.createElement('div');
        messageEl.className = `message-alert alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
        messageEl.style.cssText = `
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 300px;
            background: ${type === 'success' ? 'rgba(40, 167, 69, 0.9)' : 'rgba(220, 53, 69, 0.9)'};
            color: white;
            border: none;
            backdrop-filter: blur(10px);
        `;
        messageEl.textContent = message;
        
        document.body.appendChild(messageEl);
        
        // Remove message after 3 seconds
        setTimeout(() => {
            messageEl.remove();
        }, 3000);
    }
    
    // Add animation to form elements on page load
    const formGroups = document.querySelectorAll('.form-group');
    
    formGroups.forEach((group, index) => {
        group.style.opacity = '0';
        group.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            group.style.transition = 'all 0.5s ease';
            group.style.opacity = '1';
            group.style.transform = 'translateY(0)';
        }, 100 * index);
    });
    
    // Add password strength indicator for registration page
    const passwordInput = document.getElementById('register-password');
    if (passwordInput) {
        passwordInput.addEventListener('input', function() {
            const strengthIndicator = document.getElementById('password-strength') || createPasswordStrengthIndicator();
            const strength = calculatePasswordStrength(this.value);
            
            strengthIndicator.textContent = `Password strength: ${strength.text}`;
            strengthIndicator.className = `password-strength strength-${strength.level}`;
        });
    }
    
    function createPasswordStrengthIndicator() {
        const indicator = document.createElement('div');
        indicator.id = 'password-strength';
        indicator.className = 'password-strength';
        indicator.style.cssText = `
            margin-top: 5px;
            font-size: 0.85rem;
            transition: all 0.3s ease;
        `;
        
        const passwordGroup = document.querySelector('.form-group input[id="register-password"]').closest('.form-group');
        passwordGroup.appendChild(indicator);
        
        return indicator;
    }
    
    function calculatePasswordStrength(password) {
        // let strength = 0;
        
        // if (password.length >= 8) strength++;
        // if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++;
        // if (password.match(/\d/)) strength++;
        // if (password.match(/[^a-zA-Z\d]/)) strength++;
        
        // const levels = [
        //     { level: 0, text: 'Very Weak' },
        //     { level: 1, text: 'Weak' },
        //     { level: 2, text: 'Medium' },
        //     { level: 3, text: 'Strong' },
        //     { level: 4, text: 'Very Strong' }
        // ];
        
        // return levels[strength] || levels[0];

console.log (password)


    }
});